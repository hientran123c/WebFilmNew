@model Film_website.Models.Movie
@{
    ViewData["Title"] = $"Watch {Model.Title}";
}

<div class="movie-details-container">
    <!-- Header with back button -->
    <div class="details-header">
        <button class="back-btn" onclick="history.back()">
            <i class="fas fa-arrow-left"></i>
            Back
        </button>
        <h1>@Model.Title</h1>
    </div>

    <!-- Movie Player Section -->
    <div class="movie-player-section">
        @if (!string.IsNullOrEmpty(Model.FilePath))
        {
            <div class="video-container">
                <video id="moviePlayer" controls poster="@Model.ThumbnailPath" preload="metadata">
                    <source src="@Model.FilePath" type="video/mp4">
                    <p>
                        Your browser does not support the video tag.
                        <a href="@Model.FilePath" download>Download the movie</a> instead.
                    </p>
                </video>
                <div class="video-controls-overlay">
                    <button class="fullscreen-btn" onclick="toggleFullscreen()">
                        <i class="fas fa-expand"></i>
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="no-video-message">
                <i class="fas fa-film fa-3x"></i>
                <h3>Video not available</h3>
                <p>This movie doesn't have a video file uploaded yet.</p>
            </div>
        }
    </div>

    <!-- Movie Information -->
    <div class="movie-info-section">
        <div class="movie-metadata">
            <div class="metadata-grid">
                <div class="metadata-item">
                    <span class="metadata-label">Genre:</span>
                    <span class="metadata-value genre-tag">@Model.Genre</span>
                </div>
                <div class="metadata-item">
                    <span class="metadata-label">Release Year:</span>
                    <span class="metadata-value">@Model.ReleaseYear</span>
                </div>
                <div class="metadata-item">
                    <span class="metadata-label">Added:</span>
                    <span class="metadata-value">@Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                </div>
                @if (Model.UpdatedAt.HasValue)
                {
                    <div class="metadata-item">
                        <span class="metadata-label">Updated:</span>
                        <span class="metadata-value">@Model.UpdatedAt.Value.ToString("MMM dd, yyyy")</span>
                    </div>
                }
            </div>
        </div>

        <div class="movie-description">
            <h3>Description</h3>
            <p>@Model.Description</p>
        </div>

        <!-- Action Buttons -->
        <div class="movie-actions">
            @if (!string.IsNullOrEmpty(Model.FilePath))
            {
                <button class="action-btn primary" onclick="playMovie()">
                    <i class="fas fa-play"></i>
                    Play Movie
                </button>
                <a href="@Model.FilePath" download="@Model.Title" class="action-btn secondary">
                    <i class="fas fa-download"></i>
                    Download
                </a>
            }
            <button class="action-btn secondary" onclick="addToWatchlist()">
                <i class="fas fa-bookmark"></i>
                Add to Watchlist
            </button>
            <button class="action-btn secondary" onclick="shareMovie()">
                <i class="fas fa-share"></i>
                Share
            </button>
        </div>
    </div>

    <!-- Related Movies Section -->
    <div class="related-movies-section">
        <h3>More from @Model.Genre</h3>
        <div class="related-movies-grid" id="relatedMovies">
            <!-- Related movies will be loaded here via JavaScript -->
        </div>
    </div>
</div>

<style>
    .movie-details-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #141414 0%, #000000 100%);
        color: white;
        padding: 2rem;
    }

    .details-header {
        display: flex;
        align-items: center;
        gap: 2rem;
        margin-bottom: 3rem;
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
    }

    .back-btn {
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.8rem 1.5rem;
        border-radius: 25px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        text-decoration: none;
    }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: white;
            transform: translateX(-5px);
        }

    .details-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
    }

    .movie-player-section {
        max-width: 1200px;
        margin: 0 auto 3rem auto;
    }

    .video-container {
        position: relative;
        width: 100%;
        max-width: 100%;
        background: #000;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
    }

    #moviePlayer {
        width: 100%;
        height: auto;
        min-height: 400px;
        display: block;
    }

    .video-controls-overlay {
        position: absolute;
        top: 15px;
        right: 15px;
        z-index: 10;
    }

    .fullscreen-btn {
        background: rgba(0, 0, 0, 0.7);
        border: none;
        color: white;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .fullscreen-btn:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }

    .no-video-message {
        text-align: center;
        padding: 4rem 2rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        border: 2px dashed rgba(255, 255, 255, 0.2);
    }

        .no-video-message i {
            color: rgba(255, 255, 255, 0.3);
            margin-bottom: 1rem;
        }

        .no-video-message h3 {
            margin: 1rem 0;
            color: rgba(255, 255, 255, 0.7);
        }

    .movie-info-section {
        max-width: 1200px;
        margin: 0 auto;
    }

    .movie-metadata {
        background: rgba(255, 255, 255, 0.05);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
    }

    .metadata-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
    }

    .metadata-item {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .metadata-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.6);
        font-weight: 500;
    }

    .metadata-value {
        font-size: 1.1rem;
        font-weight: 600;
    }

    .genre-tag {
        background: linear-gradient(45deg, #e50914, #ff6b6b);
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        display: inline-block;
        font-size: 0.9rem;
        width: fit-content;
    }

    .movie-description {
        background: rgba(255, 255, 255, 0.05);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
    }

        .movie-description h3 {
            margin-top: 0;
            margin-bottom: 1rem;
            font-size: 1.5rem;
            color: #e50914;
        }

        .movie-description p {
            line-height: 1.6;
            font-size: 1.1rem;
            color: rgba(255, 255, 255, 0.9);
        }

    .movie-actions {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-bottom: 3rem;
    }

    .action-btn {
        padding: 1rem 2rem;
        border: none;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        text-decoration: none;
    }

        .action-btn.primary {
            background: linear-gradient(45deg, #e50914, #ff6b6b);
            color: white;
        }

            .action-btn.primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(229, 9, 20, 0.4);
            }

        .action-btn.secondary {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

            .action-btn.secondary:hover {
                background: rgba(255, 255, 255, 0.2);
                border-color: white;
                transform: translateY(-2px);
            }

    .related-movies-section {
        max-width: 1200px;
        margin: 0 auto;
    }

        .related-movies-section h3 {
            font-size: 1.8rem;
            margin-bottom: 2rem;
            color: #e50914;
        }

    .related-movies-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 1.5rem;
    }

    .related-movie-card {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .related-movie-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
        }

    .related-movie-poster {
        width: 100%;
        height: 200px;
        background: linear-gradient(135deg, #333, #555);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
    }

        .related-movie-poster img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .related-movie-info {
        padding: 1rem;
    }

    .related-movie-title {
        font-size: 1rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
        color: white;
    }

    .related-movie-genre {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.6);
    }

    /* Responsive Design */
    media (max-width: 768px) {
        .movie-details-container

    {
        padding: 1rem;
    }

    .details-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 2rem;
    }

        .details-header h1 {
            font-size: 2rem;
        }

    .metadata-grid {
        grid-template-columns: 1fr;
    }

    .movie-actions {
        flex-direction: column;
    }

    .action-btn {
        justify-content: center;
    }

    .related-movies-grid {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }

    }

    media (max-width: 480px) {
        .movie-metadata, .movie-description

    {
        padding: 1.5rem;
    }

    #moviePlayer {
        min-height: 250px;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load related movies
        loadRelatedMovies();

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            const video = document.getElementById('moviePlayer');
            if (video && !video.paused) {
                switch(e.key) {
                    case ' ':
                        e.preventDefault();
                        togglePlayPause();
                        break;
                    case 'f':
                    case 'F':
                        e.preventDefault();
                        toggleFullscreen();
                        break;
                    case 'Escape':
                        exitFullscreen();
                        break;
                }
            }
        });
    });

    function playMovie() {
        const video = document.getElementById('moviePlayer');
        if (video) {
            video.play();
            video.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }

    function togglePlayPause() {
        const video = document.getElementById('moviePlayer');
        if (video) {
            if (video.paused) {
                video.play();
            } else {
                video.pause();
            }
        }
    }

    function toggleFullscreen() {
        const video = document.getElementById('moviePlayer');
        if (video) {
            if (document.fullscreenElement) {
                document.exitFullscreen();
            } else {
                video.requestFullscreen().catch(err => {
                    console.log('Error attempting to enable fullscreen:', err);
                });
            }
        }
    }

    function exitFullscreen() {
        if (document.fullscreenElement) {
            document.exitFullscreen();
        }
    }

    function addToWatchlist() {
        // Implement watchlist functionality
        alert('Added to watchlist! (Feature coming soon)');
    }

    function shareMovie() {
        // Implement share functionality
        if (navigator.share) {
            navigator.share({
                title: '@Model.Title',
                text: 'Check out this movie: @Model.Title',
                url: window.location.href
            });
        } else {
            // Fallback - copy to clipboard
            navigator.clipboard.writeText(window.location.href).then(() => {
                alert('Movie link copied to clipboard!');
            });
        }
    }

    function loadRelatedMovies() {
        // Simulate loading related movies (you can implement actual API call)
        const relatedContainer = document.getElementById('relatedMovies');

        // You can fetch related movies from your server here
        fetch(`/Movie/Search?query=@Model.Genre`)
            .then(response => response.text())
            .then(html => {
                // Parse response and extract movie cards
                // This is a simplified implementation
                relatedContainer.innerHTML = '<p style="color: rgba(255,255,255,0.6); text-align: center;">Related movies will be loaded here.</p>';
            })
            .catch(error => {
                console.log('Error loading related movies:', error);
                relatedContainer.innerHTML = '<p style="color: rgba(255,255,255,0.6); text-align: center;">Unable to load related movies.</p>';
            });
    }
</script>